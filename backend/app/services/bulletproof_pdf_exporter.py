"""
ðŸš€ BULLETPROOF 10/10 PDF EXPORTER - GEMINI COMPATIBLE
======================================================

Uses ALL data from our bulletproof Gemini extractor including:
- 50+ fields from bulletproof extractor
- Professional multi-page layout
- Complete data utilization (banking, customer, GST compliance)
"""

from reportlab.lib.pagesizes import A4
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.lib import colors
from reportlab.lib.enums import TA_CENTER, TA_LEFT, TA_RIGHT
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer
from datetime import datetime
from typing import Dict, List


class BulletproofPDFExporter:
    """
    Creates comprehensive PDF exports using ALL data from bulletproof Gemini extractor
    """
    
    def __init__(self):
        # Get base styles
        self.styles = getSampleStyleSheet()
        
        # Create custom styles
        self.custom_styles = {
            'Title': ParagraphStyle(
                'CustomTitle',
                parent=self.styles['Heading1'],
                fontSize=18,
                spaceAfter=20,
                alignment=TA_CENTER,
                textColor=colors.HexColor('#1F4E78')
            ),
            'SectionHeader': ParagraphStyle(
                'SectionHeader',
                parent=self.styles['Heading2'],
                fontSize=14,
                spaceBefore=15,
                spaceAfter=10,
                textColor=colors.HexColor('#1F4E78')
            ),
            'FieldLabel': ParagraphStyle(
                'FieldLabel',
                parent=self.styles['Normal'],
                fontSize=10,
                spaceBefore=3,
                spaceAfter=3
            ),
            'FieldValue': ParagraphStyle(
                'FieldValue',
                parent=self.styles['Normal'],
                fontSize=10,
                spaceAfter=6
            ),
            'Footer': ParagraphStyle(
                'Footer',
                parent=self.styles['Normal'],
                fontSize=8,
                alignment=TA_CENTER,
                textColor=colors.grey
            )
        }
    
    def export_invoice(self, invoice_data: Dict, filename: str = None) -> str:
        """
        Export invoice using ALL bulletproof Gemini extracted data
        
        Args:
            invoice_data: Complete invoice data from bulletproof extractor
            filename: Optional custom filename
            
        Returns:
            Path to created PDF file
        """
        if not filename:
            invoice_num = invoice_data.get('invoice_number', 'INVOICE').replace('/', '_')
            vendor_name = invoice_data.get('vendor_name', 'VENDOR').replace(' ', '_')[:15]
            filename = f"Bulletproof_Invoice_{invoice_num}_{vendor_name}_{datetime.now().strftime('%Y%m%d_%H%M')}.pdf"
        
        # Create PDF document
        doc = SimpleDocTemplate(
            filename,
            pagesize=A4,
            rightMargin=72,
            leftMargin=72,
            topMargin=72,
            bottomMargin=72
        )
        
        # Build story (content)
        story = []
        
        # Build all sections
        self._build_header(story, invoice_data)
        self._build_invoice_summary(story, invoice_data)
        self._build_vendor_section(story, invoice_data)
        self._build_customer_section(story, invoice_data)
        self._build_financial_summary(story, invoice_data)
        self._build_banking_details(story, invoice_data)
        self._build_compliance_info(story, invoice_data)
        self._build_footer(story, invoice_data)
        
        # Build PDF
        doc.build(story)
        print(f"âœ… Bulletproof PDF exported: {filename}")
        return filename
    
    def _build_header(self, story: List, data: Dict):
        """Build enhanced PDF header"""
        # Main title
        story.append(Paragraph("PROFESSIONAL INVOICE", self.custom_styles['Title']))
        
        # Subtitle with extraction quality
        metadata = data.get('_extraction_metadata', {})
        quality = metadata.get('quality_grade', 'HIGH')
        confidence = metadata.get('overall_confidence', 0.95)
        subtitle = f"Generated by TrulyInvoice.in â€¢ Quality: {quality} ({confidence:.1%})"
        story.append(Paragraph(subtitle, self.custom_styles['Footer']))
        story.append(Spacer(1, 20))
    
    def _build_invoice_summary(self, story: List, data: Dict):
        """Build core invoice summary"""
        story.append(Paragraph("INVOICE SUMMARY", self.custom_styles['SectionHeader']))
        
        # Create summary table
        summary_data = [
            ['Invoice Number:', data.get('invoice_number', 'N/A')],
            ['Invoice Date:', data.get('invoice_date', 'N/A')],
            ['Due Date:', data.get('due_date', 'N/A')],
            ['Total Amount:', f"â‚¹{float(data.get('total_amount', 0)):,.2f}"],
            ['Currency:', data.get('currency', 'INR')],
            ['Payment Status:', data.get('payment_status', 'Unknown').upper()]
        ]
        
        summary_table = Table(summary_data, colWidths=[2*inch, 3*inch])
        summary_table.setStyle(TableStyle([
            ('FONTNAME', (0, 0), (0, -1), 'Helvetica-Bold'),
            ('FONTNAME', (1, 0), (1, -1), 'Helvetica'),
            ('FONTSIZE', (0, 0), (-1, -1), 11),
            ('VALIGN', (0, 0), (-1, -1), 'TOP'),
            ('BOTTOMPADDING', (0, 0), (-1, -1), 8),
        ]))
        story.append(summary_table)
        story.append(Spacer(1, 15))
    
    def _build_vendor_section(self, story: List, data: Dict):
        """Build comprehensive vendor information section"""
        story.append(Paragraph("VENDOR INFORMATION", self.custom_styles['SectionHeader']))
        
        vendor_data = []
        vendor_fields = [
            ('Company Name', data.get('vendor_name', 'N/A')),
            ('GSTIN', data.get('vendor_gstin', 'N/A')),
            ('PAN', data.get('vendor_pan', 'N/A')),
            ('Email', data.get('vendor_email', 'N/A')),
            ('Phone', data.get('vendor_phone', 'N/A')),
            ('Address', data.get('vendor_address', 'N/A')),
            ('State', data.get('vendor_state', 'N/A')),
            ('PIN Code', data.get('vendor_pincode', 'N/A'))
        ]
        
        for label, value in vendor_fields:
            if value and value != 'N/A':
                vendor_data.append([f"{label}:", value])
        
        if vendor_data:
            vendor_table = Table(vendor_data, colWidths=[1.5*inch, 4*inch])
            vendor_table.setStyle(TableStyle([
                ('FONTNAME', (0, 0), (0, -1), 'Helvetica-Bold'),
                ('FONTNAME', (1, 0), (1, -1), 'Helvetica'),
                ('FONTSIZE', (0, 0), (-1, -1), 10),
                ('VALIGN', (0, 0), (-1, -1), 'TOP'),
                ('BOTTOMPADDING', (0, 0), (-1, -1), 5),
            ]))
            story.append(vendor_table)
        
        story.append(Spacer(1, 15))
    
    def _build_customer_section(self, story: List, data: Dict):
        """Build customer information section (if available)"""
        if data.get('customer_name'):
            story.append(Paragraph("CUSTOMER INFORMATION", self.custom_styles['SectionHeader']))
            
            customer_data = []
            customer_fields = [
                ('Customer Name', data.get('customer_name', 'N/A')),
                ('GSTIN', data.get('customer_gstin', 'N/A')),
                ('Address', data.get('customer_address', 'N/A')),
                ('State', data.get('customer_state', 'N/A')),
                ('Phone', data.get('customer_phone', 'N/A'))
            ]
            
            for label, value in customer_fields:
                if value and value != 'N/A':
                    customer_data.append([f"{label}:", value])
            
            if customer_data:
                customer_table = Table(customer_data, colWidths=[1.5*inch, 4*inch])
                customer_table.setStyle(TableStyle([
                    ('FONTNAME', (0, 0), (0, -1), 'Helvetica-Bold'),
                    ('FONTNAME', (1, 0), (1, -1), 'Helvetica'),
                    ('FONTSIZE', (0, 0), (-1, -1), 10),
                    ('VALIGN', (0, 0), (-1, -1), 'TOP'),
                    ('BOTTOMPADDING', (0, 0), (-1, -1), 5),
                ]))
                story.append(customer_table)
            
            story.append(Spacer(1, 15))
    
    def _build_financial_summary(self, story: List, data: Dict):
        """Build comprehensive financial breakdown"""
        story.append(Paragraph("FINANCIAL BREAKDOWN", self.custom_styles['SectionHeader']))
        
        # Financial summary table
        financial_data = []
        
        # Add financial items with proper formatting
        financial_items = [
            ('Subtotal', data.get('subtotal', 0)),
            ('Taxable Amount', data.get('taxable_amount', 0)),
            ('Discount', data.get('discount', 0)),
            ('Shipping Charges', data.get('shipping_charges', 0)),
            ('Other Charges', data.get('other_charges', 0)),
            ('', ''),  # Separator
            ('CGST', data.get('cgst', 0)),
            ('SGST', data.get('sgst', 0)),
            ('IGST', data.get('igst', 0)),
            ('UGST', data.get('ugst', 0)),
            ('CESS', data.get('cess', 0)),
            ('Total GST', data.get('total_gst', 0)),
            ('TDS Amount', data.get('tds_amount', 0)),
            ('TCS Amount', data.get('tcs_amount', 0)),
            ('', ''),  # Separator
            ('Round Off', data.get('roundoff', 0))
        ]
        
        for label, value in financial_items:
            if label == '':  # Separator
                financial_data.append(['', ''])
                continue
            
            if value and float(value) != 0:
                financial_data.append([label, f"â‚¹{float(value):,.2f}"])
        
        # Add total
        total_amount = float(data.get('total_amount', 0))
        financial_data.append(['', ''])  # Separator
        financial_data.append(['TOTAL AMOUNT', f"â‚¹{total_amount:,.2f}"])
        
        if financial_data:
            financial_table = Table(financial_data, colWidths=[4*inch, 2*inch])
            financial_table.setStyle(TableStyle([
                ('FONTNAME', (0, 0), (-1, -2), 'Helvetica'),
                ('FONTSIZE', (0, 0), (-1, -2), 10),
                ('ALIGN', (0, 0), (0, -1), 'LEFT'),
                ('ALIGN', (1, 0), (1, -1), 'RIGHT'),
                
                # Total row styling
                ('FONTNAME', (0, -1), (-1, -1), 'Helvetica-Bold'),
                ('FONTSIZE', (0, -1), (-1, -1), 12),
                ('BACKGROUND', (0, -1), (-1, -1), colors.HexColor('#1F4E78')),
                ('TEXTCOLOR', (0, -1), (-1, -1), colors.whitesmoke),
                ('TOPPADDING', (0, -1), (-1, -1), 8),
                ('BOTTOMPADDING', (0, -1), (-1, -1), 8),
                
                # Borders
                ('LINEBELOW', (0, -2), (-1, -2), 2, colors.HexColor('#1F4E78')),
                ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
            ]))
            story.append(financial_table)
        
        story.append(Spacer(1, 15))
    
    def _build_banking_details(self, story: List, data: Dict):
        """Build banking information section"""
        if data.get('bank_name') or data.get('account_number'):
            story.append(Paragraph("BANKING DETAILS", self.custom_styles['SectionHeader']))
            
            banking_data = []
            banking_fields = [
                ('Bank Name', data.get('bank_name', 'N/A')),
                ('Account Number', data.get('account_number', 'N/A')),
                ('IFSC Code', data.get('ifsc_code', 'N/A')),
                ('SWIFT Code', data.get('swift_code', 'N/A'))
            ]
            
            for label, value in banking_fields:
                if value and value != 'N/A':
                    banking_data.append([f"{label}:", value])
            
            if banking_data:
                banking_table = Table(banking_data, colWidths=[1.5*inch, 4*inch])
                banking_table.setStyle(TableStyle([
                    ('FONTNAME', (0, 0), (0, -1), 'Helvetica-Bold'),
                    ('FONTNAME', (1, 0), (1, -1), 'Helvetica'),
                    ('FONTSIZE', (0, 0), (-1, -1), 10),
                    ('VALIGN', (0, 0), (-1, -1), 'TOP'),
                    ('BOTTOMPADDING', (0, 0), (-1, -1), 5),
                ]))
                story.append(banking_table)
            
            story.append(Spacer(1, 15))
    
    def _build_compliance_info(self, story: List, data: Dict):
        """Build GST compliance and regulatory information"""
        # GST and compliance info
        compliance_fields = [
            ('HSN Code', data.get('hsn_code', 'N/A')),
            ('SAC Code', data.get('sac_code', 'N/A')),
            ('Place of Supply', data.get('place_of_supply', 'N/A')),
            ('Invoice Type', data.get('invoice_type', 'N/A')),
            ('Supply Type', data.get('supply_type', 'N/A')),
            ('Reverse Charge', 'Yes' if data.get('reverse_charge') else 'No'),
            ('TDS Percentage', f"{data.get('tds_percentage', 0)}%" if data.get('tds_percentage') else 'N/A')
        ]
        
        # Check if we have any compliance data
        has_compliance_data = any(value and value not in ['N/A', 'No', '0%'] 
                                for _, value in compliance_fields)
        
        if has_compliance_data:
            story.append(Paragraph("GST & COMPLIANCE INFORMATION", self.custom_styles['SectionHeader']))
            
            compliance_data = []
            for label, value in compliance_fields:
                if value and value not in ['N/A', 'No', '0%']:
                    compliance_data.append([f"{label}:", value])
            
            if compliance_data:
                compliance_table = Table(compliance_data, colWidths=[1.5*inch, 4*inch])
                compliance_table.setStyle(TableStyle([
                    ('FONTNAME', (0, 0), (0, -1), 'Helvetica-Bold'),
                    ('FONTNAME', (1, 0), (1, -1), 'Helvetica'),
                    ('FONTSIZE', (0, 0), (-1, -1), 10),
                    ('VALIGN', (0, 0), (-1, -1), 'TOP'),
                    ('BOTTOMPADDING', (0, 0), (-1, -1), 5),
                ]))
                story.append(compliance_table)
            
            story.append(Spacer(1, 15))
    
    def _build_footer(self, story: List, data: Dict):
        """Build PDF footer with metadata"""
        story.append(Spacer(1, 30))
        
        # Extraction metadata
        metadata = data.get('_extraction_metadata', {})
        extraction_date = metadata.get('extraction_date', datetime.now().isoformat())[:19]
        model_used = metadata.get('model', 'gemini-2.5-flash')
        confidence = metadata.get('overall_confidence', 0.95)
        
        footer_text = f"""Generated by TrulyInvoice.in â€¢ AI Model: {model_used} â€¢<br/>
Extraction Date: {extraction_date} â€¢ Confidence: {confidence:.1%} â€¢<br/>
This is a computer-generated invoice processed with bulletproof AI extraction."""
        
        story.append(Paragraph(footer_text, self.custom_styles['Footer']))